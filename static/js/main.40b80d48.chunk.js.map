{"version":3,"sources":["components/Header.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js","logo.svg"],"names":["Header","styled","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","Span","span","Components","observer","history","useHistory","useStores","UserStore","AuthStore","src","LogoUrl","alt","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","push","loading","Container","Home","lazy","History","Register","App","fallback","Loading","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","log","logIn","logOut","current","Uploader","file","filename","item","Object","avFile","File","set","save","serverFile","page","limit","query","Query","include","skip","descending","equalTo","find","results","this","observable","action","newList","list","concat","isLoading","append","length","hasMore","finally","newFilename","newFile","isUploading","err","isLogin","values","pullUser","resetUser","HistoryStore","reset","ImageStore","context","createContext","useContext","module","exports"],"mappings":"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","file":"static/js/main.40b80d48.chunk.js","sourcesContent":["import React from 'react';\nimport LogoUrl from '../logo.svg';\nimport { NavLink,useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from 'antd';\nimport { useStores } from '../stores';\nimport { observer } from 'mobx-react';\n\n\nconst Header = styled.header`\nbackground:transparent;\ndisplay:flex;\nalign-items:center;\njustify-content:space-between;\npadding:10px 10px;\n`\nconst Logo = styled.img`\nheight:30px;\n`\n\nconst StyledLink = styled(NavLink)`\ncolor:#fff;\nmargin-left:20px;\n&.active{\nborder-bottom:1px solid #fff;\n}\n`\nconst Login = styled.div`\n`\nconst StyledButton = styled(Button)`\nmargin-left:10px;\n`;\nconst Span=styled.span`\nfont-family:Impact, fantasy;\nfont-size:26px;    \n`\n\n\nconst Components=observer(() => {\n\n    const history=useHistory()\n    const { UserStore, AuthStore } = useStores();\n\n    const handleLogout = () => {\n      AuthStore.logout()\n    };\n\n    const handleLogin = () => {\n        history.push('/login')\n\n    };\n\n    const handleRegister = () => {\n        history.push('/register')\n    }\n\n    return (\n        <Header>\n\n            <nav>\n                <Logo src={LogoUrl} alt=\"\"/>\n                <StyledLink to=\"/\" activeClassName=\"active\" exact>首页</StyledLink>\n                <StyledLink to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\n            </nav>\n            <Span>Afeng-epic图床</Span>\n            <Login>\n                {\n                    UserStore.currentUser ? <>\n                        {UserStore.currentUser.attributes.username} <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\n                    </> :<>\n                        <StyledButton type=\"primary\" onClick={handleLogin}>登录</StyledButton>\n                        <StyledButton type=\"primary\" onClick={handleRegister}>注册账户</StyledButton>\n                    </>\n\n                }\n\n            </Login>\n        </Header>\n    )\n})\n\nexport default Components;","import React from \"react\"\r\n\r\n function loading() {\r\n    return (\r\n        <div>loading</div>\r\n    )\r\n\r\n}\r\nexport default loading","import React, {Suspense, lazy} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Loading from \"./components/Loading\"\nimport {Switch, Route} from 'react-router-dom';\nimport 'antd/dist/antd.css'\nimport styled from \"styled-components\"\nconst Container=styled.div`\nbackground-image: url(https://sbimg.cn/content/images/system/default/home_cover.jpg);\n    background-color: white;\n    min-width:100%;\n    min-height:100vh;\n`\n\nconst Home = lazy(() =>\n    import('./pages/Home')\n)\nconst History = lazy(() =>\n    import('./pages/History')\n)\nconst Login = lazy(() =>\n    import('./pages/Login')\n)\nconst Register = lazy(() =>\n    import('./pages/Register')\n)\n\nfunction App() {\n    return (\n        <Container>\n            <Header/>\n\n            <main>\n                <Suspense fallback={Loading()}>\n                    <Switch>\n                        <Route path=\"/\" exact component={Home}/>\n                        <Route path=\"/history\" component={History}/>\n                        <Route path=\"/login\" component={Login}/>\n                        <Route path=\"/register\" component={Register}/>\n                    </Switch>\n                </Suspense>\n\n            </main>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from \"react-router-dom\"\n\nReactDOM.render(\n    <Router>\n        <App/>\n    </Router>,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import AV, {User} from 'leancloud-storage'\r\n\r\nAV.init({\r\n    appId: \"BfuEKENChBLAAITbXBHnWNMl-gzGzoHsz\",\r\n    appKey: \"btJpgwXzOg4KrHIa4L45y4Qa\",\r\n    serverURL: \"https://bfuekenc.lc-cn-n1-shared.com\"\r\n});\r\n\r\nconst Auth = {\r\n    register(username, password) {\r\n        let user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n        return new Promise((resolve, reject) => {\r\n            user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\r\n        });\r\n    },\r\n\r\n\r\n    login(username, password) {\r\n        console.log('------')\r\n        console.log(username, password)\r\n        return new Promise((resolve, reject) => {\r\n            User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error));\r\n        });\r\n    },\r\n\r\n\r\n    logout() {\r\n        User.logOut();\r\n\r\n    },\r\n\r\n    getCurrentUser() {\r\n        return User.current();\r\n    }\r\n\r\n}\r\nconst Uploader = {\r\n    add(file, filename) {\r\n        const item = new AV.Object('Image');\r\n        const avFile = new AV.File(filename, file);\r\n        item.set('filename', filename)\r\n        item.set('owner', AV.User.current());\r\n        item.set('url', avFile);\r\n        return new Promise((resolve, reject) => {\r\n            item.save().then(serverFile => resolve(serverFile), error => reject(error));\r\n        })\r\n\r\n\r\n    },\r\n    find({page = 0, limit = 10}) {\r\n        const query = new AV.Query('Image')\r\n        query.include('owner')\r\n        query.limit(limit)\r\n        query.skip(limit * page)\r\n        query.descending('createAt')\r\n        query.equalTo('owner', AV.User.current())\r\n        return new Promise((resolve, reject) => {\r\n            query.find()\r\n                .then(results => resolve(results)).catch(error => reject(error))\r\n        })\r\n    }\r\n}\r\n\r\nexport {Auth, Uploader}","import {observable, action} from 'mobx';\r\nimport {Auth} from \"../models\"\r\n\r\n\r\nclass UserStore {\r\n    @observable currentUser = null;\r\n\r\n    @action pullUser(){\r\nthis.currentUser=Auth.getCurrentUser()\r\n    }\r\n    @action resetUser(){\r\n        this.currentUser=null\r\n    }\r\n\r\n}\r\n\r\nexport default new UserStore()","import {observable, action} from 'mobx';\nimport {message} from \"antd\"\nimport {Uploader} from \"../models\"\n\nclass HistoryStore {\n    @observable list = [];\n    @observable isLoading = false;\n    @observable hasMore = true;\n    @observable page = 0\n    limit = 10\n\n    @action append(newList) {\n        this.list = this.list.concat(newList)\n    }\n\n    @action find() {\n        this.isLoading = true\n        Uploader.find({page: this.page, limit: this.limit})\n            .then((newList) => {\n                this.append(newList)\n                this.page++\n                if (newList.length < this.limit) {\n                    this.hasMore = false\n                }\n            }).catch(() => {\n            message.error('加载数据失败')\n        }).finally(() => {\n            this.isLoading = false\n        })\n    }\n    @action reset(){\n        this.list=[];\n        this.isLoading=false;\n        this.hasMore=true;\n        this.page=0;\n    }\n\n}\n\nexport default new HistoryStore()","import { observable, action } from 'mobx';\r\nimport { Uploader } from '../models';\r\n\r\nclass ImageStore {\r\n    @observable filename = \"\";\r\n    @observable file = null;\r\n    @observable isUploading = false;\r\n    @observable serverFile = null;\r\n\r\n    @action setFilename(newFilename) {\r\n        this.filename = newFilename;\r\n    }\r\n\r\n    @action setFile(newFile) {\r\n        this.file = newFile;\r\n    }\r\n\r\n    @action upload() {\r\n        this.isUploading = true;\r\n        this.serverFile=null;\r\n        return new Promise((resolve, reject) => {\r\n            Uploader.add(this.file, this.filename)\r\n                .then(serverFile => {\r\n                    this.serverFile = serverFile;\r\n                    resolve(serverFile)\r\n                })\r\n                .catch(err => {\r\n                reject(err);\r\n            }).finally(() => {\r\n                this.isUploading = false;\r\n            });\r\n        })\r\n\r\n    }\r\n@action reset(){\r\n        this.isUploading=false;\r\n        this.serverFile=null;\r\n}\r\n\r\n}\r\n\r\n\r\nexport default new ImageStore();\r\n","import {observable, action} from 'mobx';\r\nimport {Auth} from \"../models\"\r\nimport UserStore from './user'\r\nimport HistoryStore from './history'\r\nimport ImageStore from './image'\r\n\r\nclass AuthStore {\r\n    @observable isLogin = false;\r\n    @observable isLoading = false;\r\n    @observable values = {\r\n        username: '',\r\n        password: ''\r\n\r\n    }\r\n\r\n    @action setIsLogin(isLogin) {\r\n        this.isLogin = isLogin;\r\n    }\r\n\r\n    @action setUsername(username) {\r\n        this.values.username = username;\r\n\r\n    }\r\n\r\n    @action setPassword(password) {\r\n        this.values.password = password\r\n    }\r\n\r\n    @action login() {\r\n        return new Promise((resolve, reject) => {\r\n            Auth.login(this.values.username, this.values.password)\r\n                .then(user => {\r\n                    UserStore.pullUser()\r\n                    resolve(user)\r\n                }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    @action register() {\r\n        return new Promise((resolve, reject) => {\r\n            Auth.register(this.values.username, this.values.password)\r\n                .then(user => {\r\n                    UserStore.pullUser()\r\n                    resolve(user)\r\n                }).catch(err => {\r\n                UserStore.resetUser()\r\n                reject(err)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    @action logout() {\r\n        Auth.logout();\r\n        UserStore.resetUser()\r\n        HistoryStore.reset()\r\n        ImageStore.reset()\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthStore();","import {createContext,useContext} from \"react\"\r\nimport AuthStore from \"./auth\"\r\nimport UserStore from './user'\r\nimport ImageStore from './image'\r\nimport  HistoryStore from './history'\r\n\r\nconst context =createContext({\r\n    AuthStore,\r\n    UserStore,\r\n    ImageStore,\r\n    HistoryStore,\r\n    }\r\n)\r\n\r\nexport const useStores=()=>useContext(context)\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}